Why you should think twice before putting pictures on social media.
(What you always wanted to know about @Incitatous)
#PrivacyAware
http://imgur.com/a/Mq1tc

If you need to include exit code 100 as part of your assignment requirements, you can do so by adding an additional check and `exit(100)` in your `main` function to handle the case where you encounter an error while closing the file descriptors. Here's the modified code with the addition of exit code 100:

```c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int errors(int n, const char *c);

int main(int argc, char *argv[]) {
    int fileTo, fileFrom;
    char buffer[1024];
    ssize_t bytesRead, written;

    if (argc != 3) {
        dprintf(STDERR_FILENO, "Usage: cp file_from file_to\n");
        exit(97);
    }

    fileFrom = open(argv[1], O_RDONLY);
    if (fileFrom == -1) {
        errors(98, argv[1]);
        exit(98);
    }

    fileTo = open(argv[2], O_CREAT | O_RDWR | O_TRUNC, 0664);
    if (fileTo == -1) {
        errors(99, argv[2]);
        exit(99);
    }

    while (1) {
        bytesRead = read(fileFrom, buffer, sizeof(buffer));
        if (bytesRead == 0)
            break;
        if (bytesRead < 0) {
            errors(98, argv[1]);
            exit(98);
        }
        written = write(fileTo, buffer, bytesRead); // Use bytesRead to write only what was read
        if (written == -1) {
            errors(99, argv[2]);
            exit(99);
        }
    }

    // Close file descriptors and handle errors
    if (close(fileFrom) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fileFrom);
        exit(100);
    }
    if (close(fileTo) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fileTo);
        exit(100);
    }

    return 0;
}

int errors(int n, const char *c) {
    switch (n) {
        case 98:
            dprintf(STDERR_FILENO, "Error: Can't read from file %s\n", c);
            break;
        case 99:
            dprintf(STDERR_FILENO, "Error: Can't write to file %s\n", c);
            break;
    }
    return 0;
}
```

In this code, after closing the file descriptors, we check the return values of the `close` function and use `exit(100)` if either of them fails to close properly. This ensures that the program exits with exit code 100 in case of an error while closing the file descriptors.
